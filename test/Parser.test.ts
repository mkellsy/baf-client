import chai, { expect } from "chai";
import sinonChai from "sinon-chai";

import { Parser } from "../src/Parser";

chai.use(sinonChai);

describe("Parser", () => {
    describe("stuff()", () => {
        it("should return the propper stuffed number array", async () => {
            let result: any;

            result = Parser.stuff([0xc0, 0, 1, 2, 3, 4, 0xdb]);

            expect(result).to.deep.equal([219, 220, 0, 1, 2, 3, 4, 219, 221]);
        });
    });

    describe("unstuff()", () => {
        it("should return an unstuffed buffer", async () => {
            let result: any;

            result = Parser.unstuff(Buffer.from([219, 220, 0, 1, 2, 3, 4, 219, 221]));

            expect(result).to.deep.equal(Buffer.from([0xc0, 0, 1, 2, 3, 4, 0xdb]));
        });
    });

    describe("chunkify()", () => {
        it("should return a single fragment object", () => {
            let result: any;

            result = Parser.chunkify(Buffer.from([0xc0, 0xc0, 0x01, 0x02, 0x03, 0x04]));
            result = Parser.chunkify(Buffer.from([0x05, 0x06, 0x07, 0x08, 0x09, 0xc0]));

            expect(result).to.deep.equal({
                chunks: [Buffer.from([0xc0, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xc0])],
                count: 1,
            });
        });

        it("should return no chunks for non marked data", () => {
            let result: any;

            result = Parser.chunkify(Buffer.from([0xc0, 0x01, 0x02, 0x03, 0x04]));

            expect(result).to.deep.equal({
                chunks: [],
                count: 0,
            });
        });

        it("should return a single chunck for non-fragmented responses", () => {
            let result: any;

            result = Parser.chunkify(Buffer.from([0xc0, 0x05, 0x06, 0x07, 0x08, 0x09, 0xc0]));

            expect(result).to.deep.equal({
                chunks: [Buffer.from([0xc0, 0x05, 0x06, 0x07, 0x08, 0x09, 0xc0])],
                count: 1,
            });
        });
    });

    describe("parse()", () => {
        it("should return an empty object of there are no maped fields", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0x4f, 0x22, 0x05, 0x12, 0x03, 0xda, 0x0a, 0x00, 0x28, 0xd8, 0xe4, 0xbd, 0xb2, 0x06, 0x32,
                    0x40, 0x37, 0x64, 0x65, 0x37, 0x62, 0x30, 0x36, 0x31, 0x35, 0x64, 0x63, 0x66, 0x35, 0x32, 0x61,
                    0x66, 0x65, 0x39, 0x30, 0x31, 0x61, 0x34, 0x38, 0x63, 0x38, 0x65, 0x63, 0x30, 0x34, 0x35, 0x64,
                    0x62, 0x65, 0x34, 0x36, 0x31, 0x34, 0x32, 0x63, 0x64, 0x65, 0x61, 0x30, 0x37, 0x30, 0x31, 0x36,
                    0x37, 0x33, 0x33, 0x35, 0x34, 0x64, 0x62, 0x33, 0x61, 0x66, 0x65, 0x30, 0x34, 0x64, 0x65, 0x30,
                    0x65,
                ]),
            );

            expect(result).to.deep.equal({});
        });

        it("should return an empty object for garbage data", () => {
            let result: any;

            result = Parser.parse(Buffer.from([0, 1, 2]));

            expect(result).to.deep.equal({});
        });

        it("should return a valid mac object", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0x7a, 0x22, 0x30, 0x12, 0x03, 0xb8, 0x09, 0x01, 0x12, 0x29, 0xc2, 0x09, 0x26, 0x12, 0x05,
                    0x33, 0x2e, 0x32, 0x2e, 0x30, 0x1a, 0x05, 0x33, 0x2e, 0x30, 0x2e, 0x30, 0x22, 0x11, 0x32, 0x30,
                    0x3a, 0x36, 0x33, 0x3a, 0x38, 0x33, 0x3a, 0x31, 0x32, 0x3a, 0x44, 0x45, 0x3a, 0x46, 0x30, 0x28,
                    0x63, 0x30, 0x96, 0x17, 0x28, 0xd8, 0xe4, 0xbd, 0xb2, 0x06, 0x32, 0x40, 0x36, 0x30, 0x65, 0x33,
                    0x64, 0x63, 0x66, 0x61, 0x35, 0x61, 0x32, 0x30, 0x35, 0x32, 0x32, 0x34, 0x39, 0x35, 0x61, 0x39,
                    0x64, 0x66, 0x36, 0x36, 0x33, 0x65, 0x37, 0x37, 0x31, 0x30, 0x30, 0x35, 0x61, 0x37, 0x61, 0x65,
                    0x35, 0x36, 0x33, 0x32, 0x61, 0x66, 0x39, 0x34, 0x61, 0x61, 0x33, 0x63, 0x35, 0x32, 0x39, 0x38,
                    0x32, 0x30, 0x65, 0x30, 0x61, 0x38, 0x33, 0x36, 0x31, 0x32, 0x66, 0x36,
                ]),
            );

            expect(result).to.deep.equal({ mac: "20:63:83:12:DE:F0" });
        });

        it("should return a valid fan state object", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0xec, 0x01, 0x22, 0xa1, 0x01, 0x12, 0x03, 0xd8, 0x02, 0x00, 0x12, 0x03, 0xe0, 0x02, 0x00,
                    0x12, 0x03, 0xe8, 0x02, 0x00, 0x12, 0x03, 0xf0, 0x02, 0x00, 0x12, 0x06, 0xc2, 0x03, 0x03, 0x6e,
                    0x6f, 0x77, 0x12, 0x03, 0xd0, 0x03, 0x01, 0x12, 0x03, 0xc8, 0x08, 0x01, 0x12, 0x03, 0xd0, 0x08,
                    0x07, 0x12, 0x03, 0xa8, 0x08, 0x01, 0x12, 0x03, 0x88, 0x04, 0x01, 0x12, 0x03, 0xf8, 0x05, 0x00,
                    0x12, 0x03, 0x80, 0x06, 0x00, 0x12, 0x03, 0xf8, 0x03, 0x00, 0x12, 0x03, 0x80, 0x04, 0x00, 0x12,
                    0x03, 0xa0, 0x03, 0x01, 0x12, 0x04, 0xa8, 0x03, 0xd8, 0x04, 0x12, 0x03, 0xb0, 0x03, 0x00, 0x12,
                    0x04, 0xb8, 0x03, 0x84, 0x07, 0x12, 0x03, 0xc8, 0x03, 0x00, 0x12, 0x03, 0xe0, 0x08, 0x00, 0x12,
                    0x03, 0xda, 0x03, 0x00, 0x12, 0x03, 0x90, 0x04, 0x00, 0x12, 0x03, 0x98, 0x04, 0x00, 0x12, 0x04,
                    0x80, 0x03, 0xbf, 0x10, 0x12, 0x03, 0xf8, 0x02, 0x01, 0x12, 0x03, 0x88, 0x03, 0x00, 0x12, 0x03,
                    0xe0, 0x03, 0x00, 0x12, 0x03, 0xf0, 0x03, 0x00, 0x12, 0x03, 0x90, 0x03, 0x00, 0x12, 0x03, 0x98,
                    0x03, 0x07, 0x12, 0x03, 0xe8, 0x03, 0x01, 0x28, 0xd8, 0xe4, 0xbd, 0xb2, 0x06, 0x32, 0x40, 0x66,
                    0x39, 0x66, 0x30, 0x31, 0x33, 0x33, 0x66, 0x64, 0x61, 0x61, 0x33, 0x64, 0x35, 0x31, 0x33, 0x62,
                    0x65, 0x31, 0x31, 0x38, 0x62, 0x65, 0x35, 0x32, 0x32, 0x33, 0x61, 0x36, 0x33, 0x31, 0x35, 0x31,
                    0x30, 0x32, 0x37, 0x64, 0x33, 0x38, 0x62, 0x30, 0x36, 0x35, 0x36, 0x66, 0x62, 0x35, 0x64, 0x64,
                    0x34, 0x36, 0x35, 0x65, 0x39, 0x30, 0x65, 0x65, 0x33, 0x38, 0x31, 0x66, 0x33, 0x36, 0x65,
                ]),
            );

            expect(result).to.deep.equal({
                fan: {
                    state: {
                        auto: false,
                        eco: true,
                        occupancy: false,
                        on: false,
                        reverse: false,
                        speed: 0,
                        whoosh: true,
                    },
                },
            });
        });

        it("should return a valid software object", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0xee, 0x03, 0x22, 0xa3, 0x03, 0x12, 0x11, 0x82, 0x01, 0x0e, 0x12, 0x05, 0x33, 0x2e, 0x32,
                    0x2e, 0x35, 0x1a, 0x05, 0x33, 0x2e, 0x32, 0x2e, 0x33, 0x12, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x76,
                    0x69, 0x6e, 0x67, 0x20, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x12, 0x10, 0x48, 0x61, 0x69, 0x6b,
                    0x75, 0x20, 0x48, 0x2f, 0x49, 0x20, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x04, 0x18, 0xdb,
                    0xdc, 0xbe, 0x01, 0x12, 0x15, 0x22, 0x13, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x30, 0x35, 0x2d, 0x32,
                    0x33, 0x54, 0x30, 0x39, 0x3a, 0x34, 0x34, 0x3a, 0x30, 0x38, 0x12, 0x16, 0x2a, 0x14, 0x32, 0x30,
                    0x32, 0x34, 0x2d, 0x30, 0x35, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x36, 0x3a, 0x34, 0x34, 0x3a, 0x30,
                    0x38, 0x5a, 0x12, 0x3c, 0x32, 0x3a, 0x47, 0x4d, 0x54, 0x38, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30,
                    0x47, 0x4d, 0x54, 0x37, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x2c, 0x4d, 0x30, 0x33, 0x2e, 0x30,
                    0x32, 0x2e, 0x30, 0x30, 0x2f, 0x30, 0x32, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x2c, 0x4d, 0x31,
                    0x31, 0x2e, 0x30, 0x31, 0x2e, 0x30, 0x30, 0x2f, 0x30, 0x32, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30,
                    0x12, 0x07, 0x3a, 0x05, 0x33, 0x2e, 0x32, 0x2e, 0x35, 0x12, 0x13, 0x42, 0x11, 0x38, 0x63, 0x3a,
                    0x34, 0x62, 0x3a, 0x31, 0x34, 0x3a, 0x35, 0x34, 0x3a, 0x62, 0x30, 0x3a, 0x33, 0x38, 0x12, 0x26,
                    0x4a, 0x24, 0x66, 0x64, 0x39, 0x62, 0x35, 0x34, 0x32, 0x33, 0x2d, 0x63, 0x36, 0x32, 0x30, 0x2d,
                    0x34, 0x34, 0x33, 0x62, 0x2d, 0x62, 0x32, 0x65, 0x36, 0x2d, 0x35, 0x31, 0x34, 0x34, 0x64, 0x32,
                    0x38, 0x31, 0x63, 0x64, 0x30, 0x62, 0x12, 0x26, 0x52, 0x24, 0x65, 0x61, 0x39, 0x62, 0x30, 0x34,
                    0x30, 0x66, 0x2d, 0x38, 0x66, 0x65, 0x37, 0x2d, 0x35, 0x31, 0x32, 0x35, 0x2d, 0x62, 0x33, 0x39,
                    0x66, 0x2d, 0x66, 0x39, 0x31, 0x31, 0x33, 0x66, 0x34, 0x31, 0x33, 0x39, 0x64, 0x62, 0x12, 0x14,
                    0x5a, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x67, 0x61, 0x73, 0x73, 0x66, 0x61, 0x6e, 0x73,
                    0x2e, 0x63, 0x6f, 0x6d, 0x12, 0x03, 0xb0, 0x07, 0x00, 0x12, 0x03, 0x6a, 0x01, 0x36, 0x12, 0x11,
                    0x8a, 0x01, 0x0e, 0x08, 0x01, 0x10, 0x01, 0x18, 0x01, 0x38, 0x01, 0x40, 0x01, 0x50, 0x01, 0x70,
                    0x01, 0x12, 0x02, 0x70, 0x00, 0x12, 0x03, 0xb0, 0x08, 0x01, 0x12, 0x03, 0xb8, 0x08, 0x01, 0x12,
                    0x03, 0xdb, 0xdc, 0x08, 0x00, 0x12, 0x02, 0x78, 0x18, 0x12, 0x03, 0xb0, 0x09, 0x01, 0x12, 0x03,
                    0xc8, 0x09, 0x01, 0x12, 0x0a, 0xe2, 0x09, 0x07, 0x08, 0x9f, 0x4d, 0x10, 0x0c, 0x20, 0x02, 0x12,
                    0x0d, 0xaa, 0x02, 0x0a, 0x31, 0x30, 0x35, 0x30, 0x2d, 0x34, 0x36, 0x2d, 0x35, 0x30, 0x12, 0x1b,
                    0x82, 0x01, 0x18, 0x08, 0x01, 0x12, 0x05, 0x33, 0x2e, 0x32, 0x2e, 0x31, 0x1a, 0x0d, 0x49, 0x6e,
                    0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x28, 0xd8, 0xe4, 0xbd, 0xb2,
                    0x06, 0x32, 0x40, 0x33, 0x30, 0x36, 0x34, 0x36, 0x63, 0x33, 0x30, 0x66, 0x35, 0x38, 0x30, 0x65,
                    0x35, 0x39, 0x37, 0x63, 0x39, 0x35, 0x38, 0x62, 0x34, 0x63, 0x66, 0x39, 0x34, 0x64, 0x36, 0x33,
                    0x36, 0x65, 0x63, 0x63, 0x36, 0x34, 0x65, 0x31, 0x37, 0x37, 0x66, 0x31, 0x37, 0x32, 0x62, 0x39,
                    0x38, 0x38, 0x64, 0x63, 0x65, 0x66, 0x31, 0x38, 0x37, 0x63, 0x30, 0x63, 0x34, 0x38, 0x61, 0x62,
                    0x37, 0x64, 0x65,
                ]),
            );

            expect(result).to.deep.equal({
                firmware: "3.2.3",
                software: "3.2.5",
            });
        });

        it("should return a valid capibilities object", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0x6e, 0x22, 0x24, 0x12, 0x03, 0xc8, 0x05, 0x18, 0x12, 0x04, 0xb0, 0x05, 0x92, 0x0f, 0x12,
                    0x04, 0xb8, 0x05, 0xd2, 0x1f, 0x12, 0x11, 0x8a, 0x01, 0x0e, 0x08, 0x01, 0x10, 0x01, 0x18, 0x01,
                    0x38, 0x01, 0x40, 0x01, 0x50, 0x01, 0x70, 0x01, 0x28, 0xd8, 0xe4, 0xbd, 0xb2, 0x06, 0x32, 0x40,
                    0x62, 0x61, 0x37, 0x31, 0x61, 0x65, 0x62, 0x34, 0x35, 0x31, 0x64, 0x38, 0x30, 0x30, 0x38, 0x32,
                    0x61, 0x39, 0x30, 0x32, 0x39, 0x31, 0x34, 0x61, 0x63, 0x34, 0x37, 0x63, 0x33, 0x63, 0x35, 0x63,
                    0x33, 0x65, 0x31, 0x65, 0x33, 0x61, 0x37, 0x30, 0x66, 0x31, 0x32, 0x35, 0x39, 0x30, 0x61, 0x37,
                    0x31, 0x37, 0x37, 0x34, 0x34, 0x31, 0x66, 0x30, 0x30, 0x66, 0x65, 0x66, 0x35, 0x36, 0x35, 0x38,
                ]),
            );

            expect(result).to.deep.equal({
                capabilities: {
                    downlight: false,
                    eco: true,
                    fan: true,
                    humidity: true,
                    luminance: false,
                    occupancy: true,
                    speaker: true,
                    temperature: true,
                    uplight: false,
                    uvc: false,
                },
                sensor: {
                    state: {
                        humidity: 40.5,
                        temperature: 19.38,
                    },
                },
            });
        });

        it("should return a valid downlight state object", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0xbb, 0x01, 0x22, 0x71, 0x12, 0x03, 0xa8, 0x04, 0x00, 0x12, 0x03, 0xb0, 0x04, 0x00, 0x12,
                    0x04, 0xb8, 0x04, 0xa0, 0x1f, 0x12, 0x03, 0xa0, 0x04, 0x00, 0x12, 0x03, 0xf0, 0x04, 0x00, 0x12,
                    0x03, 0xf8, 0x04, 0x00, 0x12, 0x06, 0xe2, 0x04, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x03, 0xe8, 0x04,
                    0x00, 0x12, 0x03, 0x90, 0x05, 0x00, 0x12, 0x03, 0x9a, 0x05, 0x00, 0x12, 0x03, 0xe0, 0x0a, 0x01,
                    0x12, 0x06, 0xf0, 0x0a, 0x80, 0xdd, 0xdb, 0xdd, 0x01, 0x12, 0x07, 0xe8, 0x0a, 0xff, 0xff, 0xff,
                    0xff, 0x0f, 0x12, 0x03, 0xf8, 0x0a, 0x00, 0x12, 0x03, 0xdb, 0xdc, 0x04, 0x01, 0x12, 0x04, 0xc8,
                    0x04, 0xd8, 0x04, 0x12, 0x03, 0xd0, 0x04, 0x00, 0x12, 0x04, 0xd8, 0x04, 0xa0, 0x38, 0x12, 0x03,
                    0xa8, 0x05, 0x00, 0x12, 0x03, 0xe8, 0x06, 0x00, 0x28, 0xd8, 0xe4, 0xbd, 0xb2, 0x06, 0x32, 0x40,
                    0x37, 0x65, 0x34, 0x34, 0x64, 0x62, 0x32, 0x34, 0x34, 0x38, 0x32, 0x65, 0x35, 0x34, 0x65, 0x64,
                    0x63, 0x36, 0x64, 0x32, 0x66, 0x65, 0x64, 0x33, 0x38, 0x35, 0x37, 0x30, 0x33, 0x61, 0x39, 0x62,
                    0x32, 0x34, 0x62, 0x65, 0x34, 0x39, 0x33, 0x37, 0x37, 0x30, 0x33, 0x37, 0x61, 0x33, 0x32, 0x61,
                    0x36, 0x35, 0x33, 0x63, 0x39, 0x38, 0x35, 0x33, 0x31, 0x39, 0x61, 0x33, 0x39, 0x66, 0x62, 0x66,
                ]),
            );

            expect(result).to.deep.equal({
                light: {
                    state: {
                        auto: false,
                        level: 0,
                        luminance: 4000,
                        on: false,
                        warm: 0,
                    },
                    target: "downlight",
                },
            });
        });

        it("should return a valid uplight state object", () => {
            let result: any;

            result = Parser.parse(
                Buffer.from([
                    0x12, 0xbb, 0x01, 0x22, 0x71, 0x12, 0x03, 0xa8, 0x04, 0x00, 0x12, 0x03, 0xb0, 0x04, 0x00, 0x12,
                    0x04, 0xb8, 0x04, 0xa0, 0x1f, 0x12, 0x03, 0xa0, 0x04, 0x00, 0x12, 0x03, 0xf0, 0x04, 0x00, 0x12,
                    0x03, 0xf8, 0x04, 0x00, 0x12, 0x06, 0xe2, 0x04, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x03, 0xe8, 0x04,
                    0x00, 0x12, 0x03, 0x90, 0x05, 0x02, 0x12, 0x03, 0x9a, 0x05, 0x00, 0x12, 0x03, 0xe0, 0x0a, 0x01,
                    0x12, 0x06, 0xf0, 0x0a, 0x80, 0xdd, 0xdb, 0xdd, 0x01, 0x12, 0x07, 0xe8, 0x0a, 0xff, 0xff, 0xff,
                    0xff, 0x0f, 0x12, 0x03, 0xf8, 0x0a, 0x00, 0x12, 0x03, 0xdb, 0xdc, 0x04, 0x01, 0x12, 0x04, 0xc8,
                    0x04, 0xd8, 0x04, 0x12, 0x03, 0xd0, 0x04, 0x00, 0x12, 0x04, 0xd8, 0x04, 0xa0, 0x38, 0x12, 0x03,
                    0xa8, 0x05, 0x00, 0x12, 0x03, 0xe8, 0x06, 0x00, 0x28, 0xd8, 0xe4, 0xbd, 0xb2, 0x06, 0x32, 0x40,
                    0x37, 0x65, 0x34, 0x34, 0x64, 0x62, 0x32, 0x34, 0x34, 0x38, 0x32, 0x65, 0x35, 0x34, 0x65, 0x64,
                    0x63, 0x36, 0x64, 0x32, 0x66, 0x65, 0x64, 0x33, 0x38, 0x35, 0x37, 0x30, 0x33, 0x61, 0x39, 0x62,
                    0x32, 0x34, 0x62, 0x65, 0x34, 0x39, 0x33, 0x37, 0x37, 0x30, 0x33, 0x37, 0x61, 0x33, 0x32, 0x61,
                    0x36, 0x35, 0x33, 0x63, 0x39, 0x38, 0x35, 0x33, 0x31, 0x39, 0x61, 0x33, 0x39, 0x66, 0x62, 0x66,
                ]),
            );

            expect(result).to.deep.equal({
                light: {
                    state: {
                        auto: false,
                        level: 0,
                        luminance: 4000,
                        on: false,
                        warm: 0,
                    },
                    target: "uplight",
                },
            });
        });
    });
});
